<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sunhyeokchoe.github.io/</id><title>Sunhyeok Choe</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-26T18:01:47+09:00</updated> <author> <name>SunhyeokChoe</name> <uri>https://sunhyeokchoe.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sunhyeokchoe.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://sunhyeokchoe.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 SunhyeokChoe </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>2. oneM2M 애플리케이션 개발 절차 (1)</title><link href="https://sunhyeokchoe.github.io/posts/oneM2M-application-development-procedure-(1)/" rel="alternate" type="text/html" title="2. oneM2M 애플리케이션 개발 절차 (1)" /><published>2022-02-19T03:19:18+09:00</published> <updated>2022-02-19T03:19:18+09:00</updated> <id>https://sunhyeokchoe.github.io/posts/oneM2M-application-development-procedure-(1)/</id> <content src="https://sunhyeokchoe.github.io/posts/oneM2M-application-development-procedure-(1)/" /> <author> <name>{"name"=>"SunhyeokChoe", "link"=>"https://github.com/SunhyeokChoe"}</name> </author> <category term="IoT" /> <category term="oneM2M" /> <summary> 원격 조명 제어 유스케이스 개요 원세종 군은 하루 일과를 마친 후 지친 몸을 이끌고 집으로 귀가했다. 집에 혼자 살고 있기 때문에 귀가했을 때 집 안에 있는 불은 모두 꺼져있는 상황이다. oneM2M 사물 인터넷 서비스를 사용하지 않았던 한달 전까지만 해도, 원세종 군은 귀가 후에 거실, 주방, 화장실 등의 불을 일일이 켜고, 취침 전에는 다시 모든 실내등들을 일일이 찾아다니며 꺼야만 했다. 그러나, 한달 전 oneM2M 기반 스마트홈 서비스에 가입하면서 부터 스마트폰을 이용한 사물인터넷 원격 조명 제어 서비스를 이용함으로써 집에 들어가서 손가락 하나로 집 안의 모든 조명을 원격으로 제어할 수 있게 된다. 위의 예시를 바탕으로 요구사항을 도출해보자. 조명은 집에 배치되어 있으며, Home... </summary> </entry> <entry><title>1. oneM2M 기술규격 및 기술문서 소개</title><link href="https://sunhyeokchoe.github.io/posts/oneM2M-technical-standards-and-technical-documents/" rel="alternate" type="text/html" title="1. oneM2M 기술규격 및 기술문서 소개" /><published>2022-02-19T00:05:08+09:00</published> <updated>2022-02-19T00:05:08+09:00</updated> <id>https://sunhyeokchoe.github.io/posts/oneM2M-technical-standards-and-technical-documents/</id> <content src="https://sunhyeokchoe.github.io/posts/oneM2M-technical-standards-and-technical-documents/" /> <author> <name>{"name"=>"SunhyeokChoe", "link"=>"https://github.com/SunhyeokChoe"}</name> </author> <category term="IoT" /> <category term="oneM2M" /> <summary> 개요 oneM2M은 에너지, 교통, 국방, 공공서비스 등 산업별로 종속적이고 폐쇄적으로 운영되는, 파편화된 서비스 플랫폼 개발 구조를 벗어나 응용서비스 인프라(플랫폼) 환경을 통합하고 공유하기 위한 사물인터넷 공통서비스 플랫폼 개발을 위해 발족된 사실상 표준화 단체이다. 전세계 지역별 표준 개발 기구인 TTA(한국), ETSI(유럽), ATIS/TIA(북미), CCSA(중국), ARIB/TTC(일본) 등 7개의 SDO(Standard Development Organization)가 공동으로 설립했다. oneM2M 표준이 적용된 인프라 형태 Domain Node Description Infrastructu... </summary> </entry> <entry><title>[WPF] 팝업 알림창 MVVM 패턴으로 구현하기</title><link href="https://sunhyeokchoe.github.io/posts/Growl-Notification/" rel="alternate" type="text/html" title="[WPF] 팝업 알림창 MVVM 패턴으로 구현하기" /><published>2022-02-18T21:51:18+09:00</published> <updated>2023-01-26T18:00:43+09:00</updated> <id>https://sunhyeokchoe.github.io/posts/Growl-Notification/</id> <content src="https://sunhyeokchoe.github.io/posts/Growl-Notification/" /> <author> <name>{"name"=>"SunhyeokChoe", "link"=>"https://github.com/SunhyeokChoe"}</name> </author> <category term="C#" /> <category term="WPF" /> <summary> WPF 앱에서 특정 이벤트 발생시 화면 구석에 Popup Notification이 띄워지도록 해봅시다. 소스는 Growl Alike WPF Notifications 글을 참고해 만들었습니다. MVVM 패턴에 맞도록 변환했고, 앱 전역에서 호출할 수 있도록 정적 Singleton Wrapper 클래스를 정의하였으며, 외부에서 메시지 창 출력 요청시 메시지 타입, 이미지 타입, 커스텀 메시지 등 손쉽게 호출할 수 있도록 타입 기반으로 분리해 놓았습니다. 그리고 데스크탑 우상단이 아닌 앱 기준 우상단에 팝업창이 나타나도록 했습니다(다중 모니터를 사용하는 환경에서 앱이 최초 실행된 모니터에서만 팝업창이 나타나므로). 팝업 알림창 최종 결과물 예시 해당 소스에서는 default로 알림창 발생시 fade-i... </summary> </entry> <entry><title>[Git] 분산 환경에서 프로젝트에 기여하기</title><link href="https://sunhyeokchoe.github.io/posts/Contributing-to-a-Project/" rel="alternate" type="text/html" title="[Git] 분산 환경에서 프로젝트에 기여하기" /><published>2022-01-13T18:20:58+09:00</published> <updated>2022-02-08T02:12:20+09:00</updated> <id>https://sunhyeokchoe.github.io/posts/Contributing-to-a-Project/</id> <content src="https://sunhyeokchoe.github.io/posts/Contributing-to-a-Project/" /> <author> <name>{"name"=>"SunhyeokChoe", "link"=>"https://github.com/SunhyeokChoe"}</name> </author> <category term="Git" /> <category term="Workflow" /> <summary> 기여하는 방식에 영향을 끼치는 변수가 다음과 같이 몇 가지 있다. 활발히 기여하는 개발자의 수가 몇인지 선택한 워크플로가 무엇인지 각 개발자에게 접근 권한을 어떻게 부여했는지 외부에서도 기여할 수 있는지 (접근 권한) 첫 번째로 살펴볼 변수는 활발히 활동하는 개발자의 수이다. 이 활발한 개발자에 대한 기준은 얼마나 잦은 빈도로 코드를 쏟아내 기여하는가이다. 대부분 둘, 셋 정도의 개발자가 하루에 몇 번 커밋을 하고 활발하지 않은 프로젝트는 더 띄엄띄엄 할 것이다. 하지만, 아주 큰 프로젝트는 수백, 수천 명의 개발자가 하루에도 수십, 수백 개의 커밋을 만들어 낸다. 개발자가 많으면 많을수록 코드를 깔끔하게 적용하거나 Merge 하기 어려워진다. 어떤 커밋은 다른 개발자가 이미 기여... </summary> </entry> <entry><title>[Git] Centralized, Integration-Manager and Benevolent dictator workflow</title><link href="https://sunhyeokchoe.github.io/posts/Distributed-Workflows/" rel="alternate" type="text/html" title="[Git] Centralized, Integration-Manager and Benevolent dictator workflow" /><published>2022-01-12T20:43:00+09:00</published> <updated>2022-01-12T21:00:24+09:00</updated> <id>https://sunhyeokchoe.github.io/posts/Distributed-Workflows/</id> <content src="https://sunhyeokchoe.github.io/posts/Distributed-Workflows/" /> <author> <name>{"name"=>"SunhyeokChoe", "link"=>"https://github.com/SunhyeokChoe"}</name> </author> <category term="Git" /> <category term="Workflow" /> <summary> 이번 글에서는 프로젝트 기여자 또는 수정사항을 취합하는 관리자의 관점에서 작업물을 프로젝트에 어떻게 포함시킬지와 수많은 개발자가 수행한 일을 취합하고 프로젝트를 운영하는 방법을 배운다. 분산 환경에서의 워크플로 중앙집중형 버전 관리 시스템과는 달리 Git은 분산형이다. Git은 구조가 매우 유연하기 때문에 여러 개발자가 협업하는 과정을 더 다양하게 구성할 수 있다. 중앙집중형 버전 관리 시스템에서 각 개발자는 중앙 저장소를 중심으로 뻗어 나온 하나의 노드일 뿐이다. 하지만 Git에서는 각 개발자의 저장소가 하나의 노드이기도 하고 중앙 저장소 같은 역할도 할 수 있다. 즉, 모든 개발자는 다른 개발자의 저장소에 작업한 내용을 전송하거나, 다른 개발자들이 본인의 프로젝트에 참여할 수 있도록 본인이 ... </summary> </entry> </feed>
